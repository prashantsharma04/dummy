pipeline:
  identifier: NGPipelinesQAAPI_Shalinitest
  name: merge-hotfix
  projectIdentifier: naidusanity
  orgIdentifier: default
  tags: {}
  stages:
    - stage:
        identifier: release
        name: release
        type: Custom
        spec:
          execution:
            steps:
              - step:
                  identifier: Wait_for_PR_Creation
                  type: Wait
                  name: Wait for PR Creation
                  spec:
                    duration: 2m
              - step:
                  identifier: Check_Build_Complete_Status
                  type: ShellScript
                  name: Check Build Complete Status
                  spec:
                    shell: Bash
                    onDelegate: true
                    source:
                      type: Inline
                      spec:
                        script: |-
                          set -e
                          # Account level Constansts
                          GITHUB_URL=<+variable.account.GITHUB_CLOUD_API_URL>/repos
                          ENV_VARS_FILE=<+variable.account.ENV_VARS_FILE>
                          GIT_USER=<+secrets.getValue("account.githubusername")>
                          GIT_PWD=<+secrets.getValue("account." + <+stage.spec.execution.steps.Get_Secret_Name.output.outputVariables.ORG_ID> + "_github_apps_access_token")>
                          TOKEN="Bearer $GIT_PWD"
                          REPO_URL=<+variable.account.COMPUTE_PLATFORM_REPO_URL>
                          HARNESS_ENTITIES_DIR=<+variable.account.HARNESS_ENTITIES_DIR>
                          GIT_PWD_PLATFORM=<+secrets.getValue("account.inmobiplatforms_github_apps_access_token")>

                          # Stage level inputs
                          GIT_PROJECT=<+stage.variables.GIT_PROJECT>
                          GIT_REPO=<+stage.variables.GIT_REPO>

                          # Main Script
                          DIR_NAME=$(date +%s)
                          mkdir $DIR_NAME
                          cd $DIR_NAME

                          git clone "https://x-access-token:$GIT_PWD_PLATFORM@$REPO_URL/$HARNESS_ENTITIES_DIR.git"
                          cd $HARNESS_ENTITIES_DIR
                          ls 
                          python3 -m pip install -r requirements.txt
                          cd scripts
                          ls 
                          python3 build_complete_status.py -g $GITHUB_URL -p $GIT_PROJECT -r $GIT_REPO -t "$TOKEN" -c $COMMENT_ID -f $ENV_VARS_FILE
                          source $ENV_VARS_FILE

                          cd ../..
                          rm -rf $DIR_NAME

                          echo $BUILD_COMPLETE_STATUS

                          if [[ $BUILD_COMPLETE_STATUS = "IN_PROGRESS" ]]
                          then
                              BUILD_COMPLETE_STATUS="FAILED"
                              # remove the above line
                              # exit 1
                          fi
                    environmentVariables:
                      - name: COMMENT_ID
                        type: String
                        value: <+stage.spec.execution.steps.Put_Merge_Comment.output.outputVariables.COMMENT_ID>
                    outputVariables:
                      - name: BUILD_COMPLETE_STATUS
                        type: String
                        value: BUILD_COMPLETE_STATUS
                  timeout: 1m
                  failureStrategies:
                    - onFailure:
                        errors:
                          - AllErrors
                        action:
                          type: Retry
                          spec:
                            retryCount: 60
                            retryIntervals:
                              - 1m
                            onRetryFailure:
                              action:
                                type: MarkAsFailure
              - step:
                  identifier: Waiting_for_change_update_on_Syzygy
                  type: Wait
                  name: Waiting for change update on Syzygy
                  spec:
                    duration: 1m
              - parallel:
                  - step:
                      identifier: Get_Artifact_from_Syzygy
                      type: Http
                      name: Get Artifact from Syzygy
                      spec:
                        method: POST
                        headers:
                          - key: Content-Type
                            value: application/json
                        outputVariables:
                          - name: ARTIFACTS_LIST
                            type: String
                            value: <+json.format(<+json.select(".[0].artifacts_list", httpResponseBody)>)>
                          - name: DOCKER_LIST
                            type: String
                            value: <+json.format(<+json.select(".[0].docker_list", httpResponseBody)>)>
                          - name: SOURCE_BRANCH
                            type: String
                            value: <+json.select(".[0].source_branch", httpResponseBody)>
                          - name: FIRST_ARTIFACT_FILE_NAME
                            type: String
                            value: <+json.select(".[0].artifacts_list[0].fileName", httpResponseBody)>
                        url: <+variable.account.SYZYGY_URL>
                        requestBody: "{\"query\": \"SELECT c.artifactDetails.<+stage.variables.ARTIFACT_TYPE> as artifacts_list, c.artifactDetails.dockerList as docker_list, c.icDetails.gitDetails.currentBranch as source_branch from c where c.orgname = \\\"<+stage.variables.GIT_PROJECT>\\\" and c.reponame = \\\"<+stage.variables.GIT_REPO>\\\" and c.branch = \\\"PR-<+stage.spec.execution.steps.Create_DevMaster_PR.output.outputVariables.PR_NUMBER>\\\" and c.icDetails.gitDetails.gitComment = \\\"merge\\\" and c.executionDetails.buildResult = \\\"Success\\\" order by c.reponame desc\"}"
                        assertion: <+httpResponseCode> == 200
                        inputVariables: []
                      timeout: 30s
                      failureStrategies:
                        - onFailure:
                            errors:
                              - AllErrors
                            action:
                              type: Retry
                              spec:
                                retryCount: 3
                                retryIntervals:
                                  - 30s
                                onRetryFailure:
                                  action:
                                    type: MarkAsFailure
                      when:
                        stageStatus: Success
                        condition: <+stage.spec.execution.steps.Check_Build_Complete_Status.output.outputVariables.BUILD_COMPLETE_STATUS>!="FAILED"
                  - step:
                      identifier: fetch_artifact_details_with_build_id
                      type: Http
                      name: fetch artifact details with build id
                      spec:
                        url: <+variable.account.SYZYGY_URL>
                        method: POST
                        headers:
                          - key: Content-Type
                            value: application/json
                        inputVariables:
                          - name: successful_build_id
                            type: String
                            value: <+input>.executionInput().regex([1-9][0-9]*)
                        outputVariables:
                          - name: ARTIFACTS_LIST
                            type: String
                            value: <+json.format(<+json.select(".[0].artifacts_list", httpResponseBody)>)>
                          - name: DOCKER_LIST
                            type: String
                            value: <+json.format(<+json.select(".[0].docker_list", httpResponseBody)>)>
                          - name: SOURCE_BRANCH
                            type: String
                            value: <+json.select(".[0].source_branch", httpResponseBody)>
                          - name: FIRST_ARTIFACT_FILE_NAME
                            type: String
                            value: <+json.select(".[0].artifacts_list[0].fileName", httpResponseBody)>
                        assertion: <+httpResponseCode> == 200
                        requestBody: "{\"query\": \"SELECT c.artifactDetails.<+stage.variables.ARTIFACT_TYPE> as artifacts_list, c.artifactDetails.dockerList as docker_list, c.icDetails.gitDetails.currentBranch as source_branch from c where c.orgname = \\\"<+stage.variables.GIT_PROJECT>\\\" and c.reponame = \\\"<+stage.variables.GIT_REPO>\\\" and c.build_id = \\\"<+step.spec.inputVariables.successful_build_id>\\\" and c.branch = \\\"master\\\" and c.executionDetails.buildResult = \\\"Success\\\" order by c.reponame desc\"}"
                      timeout: 1d
                      when:
                        stageStatus: Success
                        condition: <+stage.spec.execution.steps.Check_Build_Complete_Status.output.outputVariables.BUILD_COMPLETE_STATUS>=="FAILED"
                      failureStrategies:
                        - onFailure:
                            errors:
                              - AllErrors
                            action:
                              type: Retry
                              spec:
                                retryCount: 3
                                retryIntervals:
                                  - 30s
                                onRetryFailure:
                                  action:
                                    type: MarkAsFailure
              - step:
                  identifier: EXPORTED_DATA
                  type: ShellScript
                  name: Release Info
                  spec:
                    shell: Bash
                    onDelegate: true
                    source:
                      type: Inline
                      spec:
                        script: |-
                          #!/bin/bash
                          set -e

                          ARTIFACT_FILE_NAME=$FIRST_ARTIFACT_FILE_NAME

                          if [[ $BUILD_COMPLETE_STATUS = "FAILED" ]]
                          then
                            ARTIFACTS_LIST=$ARTIFACTS_LIST_HOTFIX
                            DOCKER_LIST=$DOCKER_LIST_HOTFIX
                            SOURCE_BRANCH=$SOURCE_BRANCH_HOTFIX
                            ARTIFACT_FILE_NAME=$FIRST_ARTIFACT_FILE_NAME_HOTFIX
                          fi

                          VERSION_REGEX="[0-9]+\.[0-9]+|[0-9]+\.[0-9]+\.[0-9]+"

                          if [[ $ARTIFACT_FILE_NAME =~ $VERSION_REGEX ]]; then
                            VERSION_REGEX_MATCHES=()
                            while [[ $ARTIFACT_FILE_NAME =~ $VERSION_REGEX ]]; do
                              VERSION_REGEX_MATCHES+=("${BASH_REMATCH[@]}")
                              ARTIFACT_FILE_NAME=${ARTIFACT_FILE_NAME#*${BASH_REMATCH[0]}}
                            done
                          fi
                          ARTIFACT_VERSION=${VERSION_REGEX_MATCHES[${#VERSION_REGEX_MATCHES[@]}-1]}

                          echo "The Following variables are being exported: "
                          echo "ARTIFACTS_LIST = $ARTIFACTS_LIST"
                          echo "DOCKER_LIST = $DOCKER_LIST"
                          echo "SOURCE_BRANCH = $SOURCE_BRANCH"
                          echo "JIRA_IDS = $JIRA_IDS"
                          echo "ARTIFACT_VERSION = $ARTIFACT_VERSION"
                          echo "FIRST_JIRA_ID = $FIRST_JIRA_ID"
                    environmentVariables:
                      - name: ARTIFACTS_LIST
                        type: String
                        value: <+stage.spec.execution.steps.Get_Artifact_from_Syzygy.output.outputVariables.ARTIFACTS_LIST>
                      - name: ARTIFACTS_LIST_HOTFIX
                        type: String
                        value: <+execution.steps.fetch_artifact_details_with_build_id.output.outputVariables.ARTIFACTS_LIST>
                      - name: DOCKER_LIST
                        type: String
                        value: <+stage.spec.execution.steps.Get_Artifact_from_Syzygy.output.outputVariables.DOCKER_LIST>
                      - name: DOCKER_LIST_HOTFIX
                        type: String
                        value: <+execution.steps.fetch_artifact_details_with_build_id.output.outputVariables.DOCKER_LIST>
                      - name: SOURCE_BRANCH
                        type: String
                        value: <+stage.spec.execution.steps.Get_Artifact_from_Syzygy.output.outputVariables.SOURCE_BRANCH>
                      - name: SOURCE_BRANCH_HOTFIX
                        type: String
                        value: <+execution.steps.fetch_artifact_details_with_build_id.output.outputVariables.SOURCE_BRANCH>
                      - name: JIRA_IDS
                        type: String
                        value: <+stage.spec.execution.steps.Get_Latest_Feature_JIRA_IDs.output.outputVariables.JIRA_IDS>
                      - name: FIRST_ARTIFACT_FILE_NAME
                        type: String
                        value: <+stage.spec.execution.steps.Get_Artifact_from_Syzygy.output.outputVariables.FIRST_ARTIFACT_FILE_NAME>
                      - name: FIRST_ARTIFACT_FILE_NAME_HOTFIX
                        type: String
                        value: <+execution.steps.fetch_artifact_details_with_build_id.output.outputVariables.FIRST_ARTIFACT_FILE_NAME>
                      - name: FIRST_JIRA_ID
                        type: String
                        value: <+stage.spec.execution.steps.Get_First_JIRA_ID.output.outputVariables.FIRST_JIRA_ID>
                      - name: BUILD_COMPLETE_STATUS
                        type: String
                        value: <+execution.steps.Check_Build_Complete_Status.output.outputVariables.BUILD_COMPLETE_STATUS>
                    outputVariables:
                      - name: ARTIFACTS_LIST
                        type: String
                        value: ARTIFACTS_LIST
                      - name: JIRA_IDS
                        type: String
                        value: JIRA_IDS
                      - name: ARTIFACT_VERSION
                        type: String
                        value: ARTIFACT_VERSION
                      - name: DOCKER_LIST
                        type: String
                        value: DOCKER_LIST
                      - name: SOURCE_BRANCH
                        type: String
                        value: SOURCE_BRANCH
                  timeout: 1m
        variables:
          - name: GIT_REPO
            type: String
            description: ""
            value: epsilon-azure-provisioning
          - name: GIT_PROJECT
            type: String
            description: ""
            value: inmobi-platforms
          - name: MERGE_COMMENT
            type: String
            description: ""
            value: +merge
          - name: BASE_BRANCH
            type: String
            description: ""
            value: master
          - name: HEAD_BRANCH
            type: String
            description: ""
            value: develop
          - name: ARTIFACT_TYPE
            type: String
            description: ""
            value: jarList.allowedValues(jarList,helmList)
